{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1kT02DkhjqfGPDayfP5Z2RgqDsmWKB7PR","timestamp":1668231197277}],"authorship_tag":"ABX9TyNPVH1HiTFDdFqfkdpykICR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"E8yodvOuUf4d"},"outputs":[],"source":["import json\n","# import urllib.request\n","import numpy as np\n","import pickle as pk\n","\n","import tensorflow as tf\n","global graph, model\n","graph = tf.get_default_graph()\n","\n","from keras.models import load_model\n","from keras.applications.vgg16 import VGG16\n","from keras.applications.imagenet_utils import preprocess_input\n","from keras.preprocessing.image import img_to_array, load_img\n","import keras.utils.data_utils\n","\n","model1 = VGG16(weights='imagenet')\n","model2 = load_model(\"static/models/model2.h5\")\n","model3_loc = load_model('static/models/model3_loc.h5')\n","model3_sev = load_model('static/models/model3_sev.h5')\n","with open('static/models/vgg16_cat_list.pk', 'rb') as f:\n","    cat_list = pk.load(f)\n","\n","CLASS_INDEX = None\n","CLASS_INDEX_PATH = 'https://s3.amazonaws.com/deep-learning-models/image-models/imagenet_class_index.json'\n","\n","\n","def get_predictions(preds, top=5):\n","    global CLASS_INDEX\n","    if len(preds.shape) != 2 or preds.shape[1] != 1000:\n","        raise ValueError('`decode_predictions` expects '\n","                         'a batch of predictions '\n","                         '(i.e. a 2D array of shape (samples, 1000)). '\n","                         'Found array with shape: ' + str(preds.shape))\n","    if CLASS_INDEX is None:\n","        fpath = keras.utils.data_utils.get_file('imagenet_class_index.json', CLASS_INDEX_PATH, cache_subdir='models')\n","        CLASS_INDEX = json.load(open(fpath))\n","    arr = []\n","    for pred in preds:\n","        top_indices = pred.argsort()[-top:][::-1]\n","        indexes = [tuple(CLASS_INDEX[str(i)]) + (pred[i],) for i in top_indices]\n","        indexes.sort(key=lambda x: x[2], reverse=True)\n","        arr.append(indexes)\n","    return arr\n","\n","\n","def prepare_image_224(img_path):\n","    # urllib.request.urlretrieve(img_path, 'save.jpg')\n","    img = load_img(img_path, target_size=(224, 224))\n","    x = img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = preprocess_input(x)\n","    return x\n","\n","\n","def pipe1(img_224, model):\n","    print(\"Ensuring entered picture is a car...\")\n","    with graph.as_default():\n","        out = model.predict(img_224)\n","    preds = get_predictions(out, top=5)\n","    for pred in preds[0]:\n","        if pred[0:2] in cat_list:\n","            return True  # \"Successful. Proceeding to damage assessment...\"\n","    return False  # \"The entered image is a not a car. Please try again. Consider a different angle or lighting.\"\n","\n","\n","def prepare_img_256(img_path):\n","    # urllib.request.urlretrieve(img_path, 'save.jpg')\n","    img = load_img(img_path, target_size=(256, 256))\n","    x = img_to_array(img)\n","    x = x.reshape((1,) + x.shape) / 255\n","    return x\n","\n","\n","def pipe2(img_256, model):\n","    print(\"Validating that damage exists....\")\n","    with graph.as_default():\n","        pred = model.predict(img_256)\n","    if pred[0][0] <= 0.5:\n","        # print(\"Validation complete - proceed to location and severity determination\")\n","        return True\n","    else:\n","        # print (\"Are you sure that your car is damaged? Please submit another picture of the damage.\")\n","        # print (\"Hint: Try zooming in/out, using a different angle or different lighting\")\n","        return False\n","\n","\n","def pipe3_loc(img_256, model):\n","    print(\"Determining location of damage...\")\n","    with graph.as_default():\n","        pred = model.predict(img_256)\n","    pred_labels = np.argmax(pred, axis=1)\n","    d = {0: 'front', 1: 'rear', 2: 'side'}\n","    for key in d.keys():\n","        if pred_labels[0] == key:\n","            # print(\"Result: damage to {} of vehicle\".format(d[key]))\n","            return d[key]\n","    # print(\"Location assessment complete.\")\n","\n","\n","def pipe3_sev(img_256, model):\n","    print(\"Determining severity of damage...\")\n","    with graph.as_default():\n","        pred = model.predict(img_256)\n","    pred_labels = np.argmax(pred, axis=1)\n","    d = {0: 'minor', 1: 'moderate', 2: 'severe'}\n","    for key in d.keys():\n","        if pred_labels[0] == key:\n","            # print(\"Result:{} damage\".format(d[key]))\n","            return d[key]\n","    # print(\"Severity assessment complete.\")\n","\n","\n","def pipe(img_path):\n","    img_224 = prepare_image_224(img_path)\n","    p1 = pipe1(img_224, model1)\n","\n","    if p1 is False:\n","        result = {'pipe1': 'Car validation check: ',\n","                  'pipe1_result': 0,\n","                  'pipe1_message': {0: 'The entered image is a not a car. Please try again. ',\n","                                    1: 'Hint: Consider a different angle or lighting.'},\n","                  'pipe2': None,\n","                  'pipe2_result': None,\n","                  'pipe2_message': {0: None, 1: None},\n","                  'location': None,\n","                  'severity': None,\n","                  'final': 'Damage assessment unsuccessful!'}\n","        return result\n","\n","    img_256 = prepare_img_256(img_path)\n","    p2 = pipe2(img_256, model2)\n","\n","    if p2 is False:\n","        result = {'pipe1': 'Car validation check: ',\n","                  'pipe1_result': 1,\n","                  'pipe1_message': {0: None, 1: None},\n","                  'pipe2': 'Damage validation check: ',\n","                  'pipe2_result': 0,\n","                  'pipe2_message': {0: 'Are you sure that your car is damaged? Please try again.',\n","                                    1: 'Hint: Consider a different angle or lighting.'},\n","                  'location': None,\n","                  'severity': None,\n","                  'final': 'Damage assessment unsuccessful!'}\n","        return result\n","\n","    x = pipe3_loc(img_256, model3_loc)\n","    y = pipe3_sev(img_256, model3_sev)\n","\n","    result = {'pipe1': 'Car validation check: ',\n","              'pipe1_result': 1,\n","              'pipe1_message': {0: None, 1: None},\n","              'pipe2': 'Damage validation check: ',\n","              'pipe2_result': 1,\n","              'pipe2_message': {0: None, 1: None},\n","              'location': x,\n","              'severity': y,\n","              'final': 'Damage assessment complete!'}\n","    return result"]}]}